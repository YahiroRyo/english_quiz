name: ApiDeploy

on:
  push:
    branches:
      - api/production
  delete:
    branches:
      - api/production

jobs:
  deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./api

    steps:
    - uses: actions/setup-node@v3
      with:
        node-version: 16
    - uses: actions/checkout@v2
      with:
        SLS_INTERACTIVE_SETUP_ENABLE: 1
    - name: configure aws
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-1
    - name: composer install
      run: composer install -n --prefer-dist
    - name: setting yml
      env:
        APP_KEY: ${{ secrets.APP_KEY }}
        CHAT_GPT_TOKEN: ${{ secrets.CHAT_GPT_TOKEN }}
        LOG_LEVEL: ${{ secrets.LOG_LEVEL }}
        LOG_CHANNEL: ${{ secrets.LOG_CHANNEL }}
        DB_CONNECTION: ${{ secrets.DB_CONNECTION }}
        DB_PORT: ${{ secrets.DB_PORT }}
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_DATABASE: ${{ secrets.DB_DATABASE }}
        DB_USER_NAME: ${{ secrets.DB_USER_NAME }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        AWS_URL: ${{ secrets.AWS_URL }}
        AWS_BUCKET: ${{ secrets.AWS_BUCKET }}
        AWS_USE_PATH_STYLE_ENDPOINT: ${{ secrets.AWS_USE_PATH_STYLE_ENDPOINT }}
        AWS_SPEECH_FILES_BUCKET: ${{ secrets.AWS_SPEECH_FILES_BUCKET }}
        AWS_SPEECH_FILES_URL: ${{ secrets.AWS_SPEECH_FILES_URL }}
        MYSQL_ATTR_SSL_CA: ${{ secrets.MYSQL_ATTR_SSL_CA }}
        SESSION_DRIVER: ${{ secrets.SESSION_DRIVER }}
        CACHE_DRIVER: ${{ secrets.CACHE_DRIVER }}
        QUEUE_CONNECTION: ${{ secrets.QUEUE_CONNECTION }}
        QUEUE_DIRVER: ${{ secrets.QUEUE_DIRVER }}
      run: |
        bash ./bin/init_config.sh
    - name: copy .crt
      run: aws s3 cp s3://yappi-english-quiz/secret/ca-certificates.crt "./"
    - name: config cache delete
      run: php artisan config:clear
    - name: install sls
      run: npm i -g serverless
    - name: deploy
      run: serverless deploy --stage prod